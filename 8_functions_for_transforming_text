8 转换文本的函数(_Functions for Transforming Text)
    在recipe中函数允许你在makefile中做一些文本处理来计算文件。你能通过函数调用使用一个函数，给出函数名和一些参数为了操作的函数。
函数处理的结果被替换入makefile中调用点，一个变量可能被替换。
    * Syntax of Functions:          怎样写函数调用
    * Text Functions:               一般目的的文本操作函数
    * File Name Functions:          操作文件名的函数
    * Conditional Functions:        实现条件的函数
    * Foreach Functions:            带有控制变量重复一些文本
    * File Functions:               写文本到文件
    * Call Functions:               扩展用户定义的函数
    * Value Functions:              返回变量未扩展的值
    * Eval Functions:               按照makefile的语法执行参数
    * Origin Functions:             发现变量得到值的地方
    * Flavor Functions:             Find out the flavor of a variable.
    * Make Control Functions:       控制make如何执行的函数
    * Shell Functions:              替换shell命令的输出
    * Guile Functions:              使用GNU Guile内嵌脚本语言

8.1 函数调用语法(_Function Call Syntax)
    函数调用类似变量引用。它能出现在任何变量引用出现的地方且使用和变量引用同样的规则扩展。函数看起来如下:
        $(function arguments)
    或者
        ${function arguments}
    function是函数名，是make的一部分。本质上你也能通过使用call内置函数创建自己的函数。
    arguments是函数的参数。它们被与函数名被一个或者多个空格或tab分割，且如果有多于一个参数，它们被逗号分割。空格和逗号不是参数
的一部分。你使用包含函数调用的分隔符，要么是括号要么是大括号，以配对的形式出现在参数中。另一种分隔符可以单独的出现。如果参数包
含其他函数或者变量引用，所有引用使用相同的分隔符是最明智的。写'$(subst a,b,$(x))'，不是'$(subst a,b,${x})'。这是因为它是清楚的
，因为分隔符的一种类型被匹配来发现引用结束。
    为每个参数写的text被变量替换和函数调用处理来产生参数值。
    逗号和不匹配的括号不能出现在参数中。前导空格不能出现在第一个参数的文本中。这些字符通过变量替换放入参数中。首先定义comma和
space，它们的是逗号和空格字符，随后替换这些变量在那些字符想出现的地方，像这样:
        comma := ,
        empty := 
        space := $(empty) $(empty)
        foo := a b c
        bar := $(subst $(space), $(comma), $(foo))
        # bar is now 'a,b,c'
    在这subst函数通过foo的值，使用逗号替换每个空格，替代结果。

8.2 字符串替换和分析的函数(_Functions for String Substitution and Analysis)
    这是一些操作字符串的函数:
$(subst from, to, text)
    在text上执行文本替换:from的每次出现被to替换。结果被函数调用替换。例如，
        $(subst ee, EE, feet on the street)
    替换字符串'fEEt on the strEEt'
$(patsubst pattern, replacement, text)
    在text中发现匹配pattern的空格分割的词，且用replacement替换它们。pattern可以包含'%'作为通配符，匹配一个词内的任何字符。如果
replacement也包含一个'%'，'%'被在pattern中'%'匹配的文本替换。只有pattern和replacement中的第一个'%'被这样对待，任何其他子'%'不
改变。
    the\%weird\\%pattern\\ the%weird\ + %字符 + pattern\\
    $(patsubst %.c, %.o, x.c.c bar.c)  ==> x.c.0 bar.o
    $(var:pattern=replacement) 等价于 $(patsubst pattern, replacement, $(var))
    $(var:suffix=replacement) 等价于 $(patsubst %suffix, %replacement, $(var))
    举例，你有一个对象文件列表
        objects = foo.o bar.o baz.o
    为了得到相应源文件列表，你可以简单的写:
        $(objects: .o=.c)
    代替使用一般形式:
        $(patsubst %.o, %.c, $(objects))
$(strip string)
    删除string中的前缀和后缀空格且替换内部多个空格为一个。因此'$(strip a b c )'返回'a b c'
$(findstring find, in)
    在in中查找find的出现。如果出现，值是find。否则，值是空的。
        $(findstring a, a b c)
        $(findstring a, b c)
    产生值'a'和''(空值)。
$(filter pattern..., text)
    返回text中匹配任何pattern词的所有的空格分割的词，删除不匹配的词。pattern使用'%'，就像在patsubst函数中使用的pattern一样。
        sources := foo.c bar.c baz.s ugh.h
        foo: $(sources)
            cc $(filter %.c %.s, $(sources)) -o foo
$(filter-out pattern..., text)
    与filter操作相反。
$(sort list)
    按字典顺序排列list中的词，删除相同的词。输出是由单个空格分割的词。
        $(sort foo bar lose)  ==> 'bar foo lose'
$(word n, text)
    返回text的第n个词。n的合法值从1开始，如果n大于text中的词数，值是空的。例如
        $(word 2, foo bar baz)  ==> 'bar'
$(wordlist s, e, text)
    返回text中以词s开始且以词e结尾的列表。s的合法值以1开始，e可以是0。如果s比text中词多，值为空。如果e比text中的词多，text全部
被返回。如果s大于e，什么也不做。例如
        $(wordlist 2, 3, foo bar baz) ==> 'bar baz'
$(words text)
    返回text中词的个数。
$(firstword names...)
    参数names作为一系列被空格分割的names。值是系列中的第一个name。names中的其他被忽略。
        $(firstword foo bar) ==> 'foo'
$(lastword names...)
    返回最后一个词。
        $(lastword foo bar) ==> 'bar'

8.3 文件名函数(_Functions for File Names)
    下列函数对每个文件名执行一个特定的转换。函数的参数是以空格分割的一系列文件名。(前导和后缀空格被忽略。)系列中的每个文件名以
同样的方式被转换且结果以单空格分隔。
$(dir names...)
    提取names中每个文件名的目录部分。目录部分包括最后的斜杠，如果文件名中没有斜杠，则为'./'
        $(dir src/foo.c hacks)  ==> 'src/ ./'
$(notdir names...)
    提取names中除目录部分的剩余所有。如果文件名没有斜杠，则不被修改。
        $(notdir src/foo.c hacks)  ==> 'foo.c hacks'
$(suffix names...)
    提取names中每个文件名的后缀。
        $(suffix src/foo.c src-1.0/bar.c hacks)  ==> '.c .c'
$(basename names...)
    提取names中每个文件名除后缀以外的所有剩余部分。
        $(basename src/foo.c src-1.0/bar hacks) ==> 'src/foo src-1.0/bar hacks'
$(addsuffix suffix, names...)
    $(addsuffix .c, foo bar) ==> 'foo.c bar.c'
$(addprefix prefix, names...)
    $(addprefix src/, foo bar)  ==> 'src/foo src/bar'
$(join list1, list2)
    $(join a b, .c .o)  ==> 'a.c b.o'
$(wildcard pattern)
    被用来检查存在性。
$(realpath names...)
    返回names中每个文件名的规范绝对路径。如果为链接，则返回真实路径。
$(abspath names...)
    返回names中每个文件名的规范绝对路径。

8.4 条件函数(_Functions for Conditionals)
    有三个函数提供了有条件的扩展。
$(if condition, then-part [,else-part])
    if函数提供了在函数上下文中条件扩展的支持。
    第一个参数condition首先去掉前缀和后缀空格，随后被扩展。如果扩展为非空字符串，那么为true。如果它扩展为空字符串，那么为false。
    如果true，第二个参数then-part被执行。
    如果false，第三个参数else-part被执行。
$(or condition1[, condition2[, condition3...]])
    or函数提供一个短路OR操作。每个参数按序扩展。如果有一个参数被扩展为非空字符串，处理停止且结果为那个字符串。如果所有参数扩展
完毕后仍为false，那么结果为空字符串。
$(and condition1[, condition2[, condition3...]])
    and函数提供了一个短路AND操作。每个参数按序扩展。如果有一个参数被扩展为空字符串，处理停止且结果为空字符串。如果所有参数扩展
完毕后仍为true，那么结果是最后一个参数的扩展。

8.5 foreach函数(_The foreach Function)
    语法:
        $(foreach var, list, text)
    例子:
        dirs := a b c d
        files := $(foreach dir, $(dirs), $(wildcard $(dir)/*))
    等价于
        files := $(wildcard a/* b/* c/* d/*)
    也等价于
        find_files = $(wildcard $(dir)/*)  #注意在此为递归扩展变量
        dirs := a b c d
        files := $(foreach dir, $(dirs), $(find_files))

8.6 文件函数(_The file Function)
    file函数允许makefile写文件。有两种写模式:覆写和追加。
    语法:
        $(file op filename[, text])
    操作符op是>(覆写)或者>>(追加)。filename是文件名。在操作符和文件名之间的空格是可选的。
    当file函数被扩展时，所有的参数首先被扩展，随后filename文件以模式op打开。最后text被写入文件。如果text没有新行，甚至为空，最
终换行符被写。如果text参数没有给，那什么也不做。执行file函数的结果总是空字符串。
    如果文件不能被打开或者写操作失败将有一个致命错误。

8.7 call函数(_The call Function)
    call函数是唯一的。它被用来创建新的参数化的函数。你能写一个复杂的表达式作为一个变量的值，随后使用call来使用不同的值扩展它。
    语法如下:
        $(call variable, parm, parm, ...)
    例子:
        reverse = $(2) $(1)
        foo = $(call reverse, a, b)  ===> 'b a'

8.8 value函数(_The value Function)
    语法:
        $(value variable)
    例子:
        P = a
        FOO = $PATH
        all:
            @echo $(FOO)
            @echo $(value FOO)
    ==>
        aATH
        $PATH环境变量

8.9 eval函数(_The eval Function)
    
8.10 origin函数(_The origin Function)
    返回结果为变量的类型。
    'undefined'，'default'，'environment'，'environment override'，'file'，'command line'，'override'，'automatic'
8.11 flavor函数(_The flavor Function)
    返回结果为变量的种类。
    'undefined'，'recursive'，'simple'
8.12 控制make的函数(_Functions That Control Make)
$(error text...)
$(warning text...)
$(info text...)
8.13 shell函数(_The shell Function)
    contents := $(shell cat foo)
    设置contents为文件foo的内容，每行以空格分隔。
8.14 guile函数(_The guile Function)
